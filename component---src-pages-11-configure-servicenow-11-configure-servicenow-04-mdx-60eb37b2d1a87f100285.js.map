{"version":3,"file":"component---src-pages-11-configure-servicenow-11-configure-servicenow-04-mdx-60eb37b2d1a87f100285.js","mappings":"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","sources":["webpack://example/./src/pages/11-configure-servicenow/11-configure-servicenow-04.mdx","webpack://example/./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack://example/./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack://example/./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.module.scss","webpack://example/./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack://example/./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack://example/./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.module.scss","webpack://example/./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack://example/./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.module.scss","webpack://example/./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack://example/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/index.js","webpack://example/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/LastModifiedDate.js","webpack://example/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/last-modified-date.module.scss","webpack://example/./node_modules/gatsby-theme-carbon/src/templates/Default.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/jorgego/CODE/waiops/nik-automationv3.6/cp4waiops-training/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Now that we have created users and configured ServiceNow, we need to configure Cloud Pak for Watson AIOps to be able to integrate with ServiceNow.`}</p>\n    <h2>{`ðŸ“¥ STEP: Creating ServiceNow integrations`}</h2>\n    <p>{`To create a ServiceNow integration, complete the following steps:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Log in to IBM Cloud Pak for Watson AIOps.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`From the console, click the navigation menu (four horizontal bars), then click `}<inlineCode parentName=\"p\">{`Define`}</inlineCode>{` > `}<inlineCode parentName=\"p\">{`Data and tool integrations`}</inlineCode>{` as shown below:`}</p>\n        <img parentName=\"li\" {...{\n          \"src\": \"./../images/snow/define-data-integration.png\",\n          \"alt\": \"config-list\"\n        }}></img>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`On the ServiceNow tile, click `}<inlineCode parentName=\"p\">{`Add integration`}</inlineCode>{`.`}</p>\n        <p parentName=\"li\"><strong parentName=\"p\">{`Note:`}</strong>{` If you do not immediately see the integration that you want to create, you can filter the tiles by type of integration. Click the type of integration that you want in the Category section.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Enter the following integration information as shown below:\n`}<img parentName=\"p\" {...{\n            \"src\": \"./../images/snow/servicenow-form.png\",\n            \"alt\": \"servicenow-form\"\n          }}></img></p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Name: The display name of your integration.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Description: An optional description for the integration.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`URL: The URL of your ServiceNow developer instance.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`User ID: the ServiceNow Events user username.`}</p>\n            <p parentName=\"li\"><strong parentName=\"p\">{`Important:`}</strong>{` You must Make sure that you are using the correct user (abel.tuter), the Events user, for your integration. You must also make sure that the time zone set for this user matches your system time zone in ServiceNow. For more information about ServiceNow users, see Create users.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Password: Here this would be `}<inlineCode parentName=\"p\">{`P4ssw0rd!`}</inlineCode>{` (if you followed the steps above - the ServiceNow Events user password).`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Encrypted password: Here this would be `}<inlineCode parentName=\"p\">{`g4W3L7/eFsUjV0eMncBkbg==`}</inlineCode>{` (if you followed the steps above - the ServiceNow Events user encrypted password).`}</p>\n          </li>\n        </ul>\n      </li>\n    </ol>\n    <ol {...{\n      \"start\": 6\n    }}>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Test your integration connection by clicking `}<inlineCode parentName=\"p\">{`Test connection`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`(Optional) You can improve search performance by mapping the fields from your implementation fields to IBM Cloud Pak for Watson AIOpsâ€™s standard fields. Enter the values that you want to map, then click Format to ensure that you entered a valid JSON configuration.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Click the Data flow toggle to turn on data collection`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Select `}<strong parentName=\"p\">{`Historical data for initial AI training:`}</strong>{` A single set of training data used to define your AI model. You must also specify the parallelism of your source data. Historical data is harvested from existing logs in your integration over a specified time period in the past.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Set the start date to 01/01/2019`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Set the end date to the current date`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Select whether you want to collect inventory and topology data from your ServiceNow instance. Click the Collect inventory and topology data toggle to turn on inventory and data collection.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`To schedule ServiceNow observer jobs, enter the following information:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Start date: The start date of when the job is to run.`}</li>\n          <li parentName=\"ul\">{`Time: The time to run the observer job.`}</li>\n          <li parentName=\"ul\">{`Time interval (period): How frequently to run the job (either by hour, or by minute).`}</li>\n          <li parentName=\"ul\">{`Interval: The duration of time between runs based on the Time interval (period). For example, if you wanted the job to run every 2 hours, in Time interval (period), select hours, and in Interval, enter 2. Enter 0 to run the observer job one time (and manually through the interface otherwise).`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Click Integrate.`}</p>\n      </li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport * as styles from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, theme, tabs = [] }) => (\n  <div\n    className={cx(styles.pageHeader, {\n      [styles.withTabs]: tabs.length,\n      [styles.darkMode]: theme === 'dark',\n    })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={styles.text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"PageHeader-module--bx--text-truncate--end--b8JtW\";\nexport var bxTextTruncateFront = \"PageHeader-module--bx--text-truncate--front--WwZFh\";\nexport var darkMode = \"PageHeader-module--dark-mode--WCeH8\";\nexport var pageHeader = \"PageHeader-module--page-header--NqfPe\";\nexport var text = \"PageHeader-module--text--Er2EO\";\nexport var withTabs = \"PageHeader-module--with-tabs--vbQ-W\";","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"EditLink-module--bx--text-truncate--end--uI0cF\";\nexport var bxTextTruncateFront = \"EditLink-module--bx--text-truncate--front--HxjcS\";\nexport var link = \"EditLink-module--link--IDrl1\";\nexport var row = \"EditLink-module--row--BEmSX\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  render() {\n    const { title, tabs, slug } = this.props;\n    const currentTab = slug.split('/').filter(Boolean).slice(-1)[0];\n\n    const pageTabs = tabs.map((tab) => {\n      const slugifiedTab = slugify(tab, { lower: true, strict: true });\n      const selected = slugifiedTab === currentTab;\n      // matches with or without trailing slash: /?\n      // matches with or without hash link: (#.*)?\n      const currentTabRegex = new RegExp(`${currentTab}/?(#.*)?$`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav aria-label={title}>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPageTabs.propTypes = {\n  tabs: PropTypes.array,\n  slug: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"PageTabs-module--bx--text-truncate--end--OC59x\";\nexport var bxTextTruncateFront = \"PageTabs-module--bx--text-truncate--front--5I6-L\";\nexport var link = \"PageTabs-module--link--Kz-7R\";\nexport var list = \"PageTabs-module--list--xLqxG\";\nexport var listItem = \"PageTabs-module--list-item--024o6\";\nexport var selectedItem = \"PageTabs-module--selected-item--aBB0K\";\nexport var tabsContainer = \"PageTabs-module--tabs-container--Cdfzw\";","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import LastModifiedDate from './LastModifiedDate';\n\nexport default LastModifiedDate;\n","import React from 'react';\nimport { Row, Column } from '../Grid';\nimport * as styles from './last-modified-date.module.scss';\n\nconst LastModifiedDate = ({ date }) => {\n  const options = {\n    day: '2-digit',\n    year: 'numeric',\n    month: 'long',\n  };\n\n  const lastModified = new Date(date);\n\n  return date ? (\n    <Row className={styles.row}>\n      <Column>\n        <div className={styles.text}>\n          Page last updated: {lastModified.toLocaleDateString('en-GB', options)}\n          {/* // https://www-03preprod.ibm.com/support/knowledgecenter/ibm_style/dates-and-times.html */}\n        </div>\n      </Column>\n    </Row>\n  ) : null;\n};\nexport default LastModifiedDate;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"last-modified-date-module--bx--text-truncate--end--QgCc7\";\nexport var bxTextTruncateFront = \"last-modified-date-module--bx--text-truncate--front--kel8a\";\nexport var row = \"last-modified-date-module--row--XJoYQ\";\nexport var text = \"last-modified-date-module--text--ogPQF\";","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Utils from '../components/Utils';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\nimport useMetadata from '../util/hooks/useMetadata';\nimport LastModifiedDate from '../components/LastModifiedDate';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const {\n    tabs,\n    title,\n    theme: frontmatterTheme,\n    description,\n    keywords,\n    date,\n  } = frontmatter;\n\n  const { interiorTheme } = useMetadata();\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug.split('/').filter(Boolean).slice(-1)[0] ||\n      slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n\n  const theme = frontmatterTheme || interiorTheme;\n\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}>\n      <PageHeader\n        title={Title ? <Title /> : title}\n        label=\"label\"\n        tabs={tabs}\n        theme={theme}\n      />\n      {tabs && (\n        <PageTabs\n          title={title}\n          slug={slug}\n          tabs={tabs}\n          currentTab={currentTab}\n        />\n      )}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n        <LastModifiedDate date={date} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <Utils />\n    </Layout>\n  );\n};\n\nexport default Default;\n"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","title","theme","tabs","className","cx","length","id","relativePagePath","repositoryProp","repository","useStaticQuery","site","siteMetadata","baseUrl","subDirectory","href","branch","PageTabs","render","this","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","strict","selected","currentTabRegex","RegExp","replace","key","Link","to","React","date","lastModified","Date","toLocaleDateString","day","year","month","pageContext","children","location","Title","frontmatter","titleType","frontmatterTheme","description","keywords","interiorTheme","useMetadata","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","Utils"],"sourceRoot":""}