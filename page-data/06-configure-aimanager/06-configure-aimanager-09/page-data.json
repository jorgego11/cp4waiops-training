{
    "componentChunkName": "component---src-pages-06-configure-aimanager-06-configure-aimanager-09-mdx",
    "path": "/06-configure-aimanager/06-configure-aimanager-09/",
    "result": {"pageContext":{"frontmatter":{"title":"Configure Certificates","date":"2022-11-03T09:57:46.000Z","weight":59},"relativePagePath":"/06-configure-aimanager/06-configure-aimanager-09.mdx","titleType":"page","MdxNode":{"id":"2ea4e3dd-bae7-56e5-b37d-534cc75e76ec","children":[],"parent":"9b90cd18-3ea7-56d0-b010-0cc7900a67f3","internal":{"content":"---\ntitle: \"Configure Certificates\"\ndate: 2022-11-03T10:57:46+01:00\nweight: 59\n---\n\n\n\n\nA signed certificate is needed on the NGNIX pods for the Slack and Teams integrations.\n\nThe AutomationUIConfig instance controls the certificates and the NGINX pods that use them.\n\n\n\n\n## üöÄ TASK: Create valid Ingress certificates\n\n<a href=\"https://www.ibm.com/docs/en/cloud-paks/cloud-pak-watson-aiops/3.6.0?topic=manager-starter-installation-cli\" target=\"_blank\" >üåè Documentation for the Task: nline starter installation of CP4WAIOPS</a>\n\n\n\nCreate valid Ingress Certificates as described in the Documentation.\n\n\n\n\n<Accordion>\n<AccordionItem title=\"üí° Need Help?\">\n\n\n\n\n\n\n\n\n## Patch NetworkPolicy\n\n1. Run the following command to patch the NetworkPolicy\n\n    ```bash\n    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')\n\n    cat <<EOF | oc apply -f -\n    apiVersion: networking.k8s.io/v1\n    kind: NetworkPolicy\n    metadata:\n      name: allow-all-egress-and-ingress\n      annotations:\n        argocd.argoproj.io/sync-wave: \"3\"\n      namespace: $WAIOPS_NAMESPACE\n    spec:\n      egress:\n      - {}\n      ingress:\n      - {}\n      podSelector: {}\n      policyTypes:\n      - Egress\n      - Ingress\n    EOF\n    ```\n\n\n2. Run the following command to patch the Ingress Certificates\n\n    ```bash\n    PROJECT_CP4WAIOPS=cp4waiops\n\n\tAUTO_UI_INSTANCE=$(oc get AutomationUIConfig -n ${PROJECT_CP4WAIOPS} --no-headers -o custom-columns=\":metadata.name\")\n\n\tingress_pod=$(oc get secrets -n openshift-ingress | grep tls | grep -v router-metrics-certs-default | awk '{print $1}')\n\n\toc get secret -n openshift-ingress -o 'go-template={{index .data \"tls.crt\"}}' ${ingress_pod} | base64 -d > cert.crt\n\toc get secret -n openshift-ingress -o 'go-template={{index .data \"tls.key\"}}' ${ingress_pod} | base64 -d > cert.key\n\toc get secret -n ${PROJECT_CP4WAIOPS} external-tls-secret -o yaml > external-tls-secret.yaml\n\n\toc patch AutomationUIConfig ${AUTO_UI_INSTANCE} \\\n\t-n ${PROJECT_CP4WAIOPS} \\\n\t--type merge \\\n\t--patch '{\"spec\": {\"tls\": {\"caSecret\": {\"key\":\"ca.crt\", \"secretName\": \"external-tls-secret\"}, \"certificateSecret\": { \"secretName\": \"external-tls-secret\"}}}}'\n\n\toc create secret generic -n ${PROJECT_CP4WAIOPS} external-tls-secret --from-file=cert.crt=cert.crt --from-file=cert.key=cert.key -o yaml --dry-run=client | oc apply -f -\n\n\tREPLICAS=$(oc get Deployment/ibm-nginx -n ${PROJECT_CP4WAIOPS} -o jsonpath='{.spec.replicas}')\n\toc scale Deployment/ibm-nginx --replicas=0 -n ${PROJECT_CP4WAIOPS}\n\tsleep 3\n\toc scale Deployment/ibm-nginx --replicas=${REPLICAS} -n ${PROJECT_CP4WAIOPS}\n    ```\n\n\n\n3. To check that the nginx Pods are back up, run the following:\n\n\t```bash\n\texport WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')\n\twhile :; do clear; echo \"Checking...\"; echo \"Exit with Ctrl-C\"; oc get po -n $WAIOPS_NAMESPACE | grep nginx|grep -v ibm-nginx-tester|grep -v setup-nginx-job ; sleep 2; done\n\t```\n\n\tThis will list the Pods that are Ready.\n\n\tWait until you get two pods with `1/1` status\n\n\t```yaml\n\tibm-nginx-xxxxx-xxx                                       1/1     Running     0               4h9m\n\tibm-nginx-xxxxx-xxx                                       1/1     Running     0               4h9m\n\t```\n\n<InlineNotification kind=\"info\">\n\nThis creates valid certificates for the OpenShift Ingress, so that you can integrate with Slack.\n\n</InlineNotification>\n\n</AccordionItem>\n</Accordion>\n\n\n\n<InlineNotification kind=\"success\">\n\n**You have successfully finished this Chapter**\n\nYou are now done with the chapter on Configuring CP4WAIOPS.\n\nPlease continue to the next chapter to learn how to train the AI Models.\n\n</InlineNotification>","type":"Mdx","contentDigest":"8be4e65c5cd3de23c96fa7eac2f235b0","owner":"gatsby-plugin-mdx","counter":310},"frontmatter":{"title":"Configure Certificates","date":"2022-11-03T09:57:46.000Z","weight":59},"exports":{},"rawBody":"---\ntitle: \"Configure Certificates\"\ndate: 2022-11-03T10:57:46+01:00\nweight: 59\n---\n\n\n\n\nA signed certificate is needed on the NGNIX pods for the Slack and Teams integrations.\n\nThe AutomationUIConfig instance controls the certificates and the NGINX pods that use them.\n\n\n\n\n## üöÄ TASK: Create valid Ingress certificates\n\n<a href=\"https://www.ibm.com/docs/en/cloud-paks/cloud-pak-watson-aiops/3.6.0?topic=manager-starter-installation-cli\" target=\"_blank\" >üåè Documentation for the Task: nline starter installation of CP4WAIOPS</a>\n\n\n\nCreate valid Ingress Certificates as described in the Documentation.\n\n\n\n\n<Accordion>\n<AccordionItem title=\"üí° Need Help?\">\n\n\n\n\n\n\n\n\n## Patch NetworkPolicy\n\n1. Run the following command to patch the NetworkPolicy\n\n    ```bash\n    export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')\n\n    cat <<EOF | oc apply -f -\n    apiVersion: networking.k8s.io/v1\n    kind: NetworkPolicy\n    metadata:\n      name: allow-all-egress-and-ingress\n      annotations:\n        argocd.argoproj.io/sync-wave: \"3\"\n      namespace: $WAIOPS_NAMESPACE\n    spec:\n      egress:\n      - {}\n      ingress:\n      - {}\n      podSelector: {}\n      policyTypes:\n      - Egress\n      - Ingress\n    EOF\n    ```\n\n\n2. Run the following command to patch the Ingress Certificates\n\n    ```bash\n    PROJECT_CP4WAIOPS=cp4waiops\n\n\tAUTO_UI_INSTANCE=$(oc get AutomationUIConfig -n ${PROJECT_CP4WAIOPS} --no-headers -o custom-columns=\":metadata.name\")\n\n\tingress_pod=$(oc get secrets -n openshift-ingress | grep tls | grep -v router-metrics-certs-default | awk '{print $1}')\n\n\toc get secret -n openshift-ingress -o 'go-template={{index .data \"tls.crt\"}}' ${ingress_pod} | base64 -d > cert.crt\n\toc get secret -n openshift-ingress -o 'go-template={{index .data \"tls.key\"}}' ${ingress_pod} | base64 -d > cert.key\n\toc get secret -n ${PROJECT_CP4WAIOPS} external-tls-secret -o yaml > external-tls-secret.yaml\n\n\toc patch AutomationUIConfig ${AUTO_UI_INSTANCE} \\\n\t-n ${PROJECT_CP4WAIOPS} \\\n\t--type merge \\\n\t--patch '{\"spec\": {\"tls\": {\"caSecret\": {\"key\":\"ca.crt\", \"secretName\": \"external-tls-secret\"}, \"certificateSecret\": { \"secretName\": \"external-tls-secret\"}}}}'\n\n\toc create secret generic -n ${PROJECT_CP4WAIOPS} external-tls-secret --from-file=cert.crt=cert.crt --from-file=cert.key=cert.key -o yaml --dry-run=client | oc apply -f -\n\n\tREPLICAS=$(oc get Deployment/ibm-nginx -n ${PROJECT_CP4WAIOPS} -o jsonpath='{.spec.replicas}')\n\toc scale Deployment/ibm-nginx --replicas=0 -n ${PROJECT_CP4WAIOPS}\n\tsleep 3\n\toc scale Deployment/ibm-nginx --replicas=${REPLICAS} -n ${PROJECT_CP4WAIOPS}\n    ```\n\n\n\n3. To check that the nginx Pods are back up, run the following:\n\n\t```bash\n\texport WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')\n\twhile :; do clear; echo \"Checking...\"; echo \"Exit with Ctrl-C\"; oc get po -n $WAIOPS_NAMESPACE | grep nginx|grep -v ibm-nginx-tester|grep -v setup-nginx-job ; sleep 2; done\n\t```\n\n\tThis will list the Pods that are Ready.\n\n\tWait until you get two pods with `1/1` status\n\n\t```yaml\n\tibm-nginx-xxxxx-xxx                                       1/1     Running     0               4h9m\n\tibm-nginx-xxxxx-xxx                                       1/1     Running     0               4h9m\n\t```\n\n<InlineNotification kind=\"info\">\n\nThis creates valid certificates for the OpenShift Ingress, so that you can integrate with Slack.\n\n</InlineNotification>\n\n</AccordionItem>\n</Accordion>\n\n\n\n<InlineNotification kind=\"success\">\n\n**You have successfully finished this Chapter**\n\nYou are now done with the chapter on Configuring CP4WAIOPS.\n\nPlease continue to the next chapter to learn how to train the AI Models.\n\n</InlineNotification>","fileAbsolutePath":"/Users/jorgego/CODE/waiops/nik-automationv3.6/cp4waiops-training/src/pages/06-configure-aimanager/06-configure-aimanager-09.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}